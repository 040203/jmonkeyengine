package jopenvr;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * Holds all the state of a controller at one moment in time (see <a href="https://github.com/ValveSoftware/openvr/wiki/IVRSystem::GetControllerState">IVRSystem::GetControllerState</a>).
 * 
 * <p>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class VRControllerState_t extends Structure {
	
	/**
	 * If packet num matches that on your prior call, 
	 * then the controller state hasn't been changed since your last call and there is no need to process it.
	 */
	public int unPacketNum;
	
	/**
	 * Bit flags for each of the buttons. Use ButtonMaskFromId to turn an ID into a mask.
	 */
	public long ulButtonPressed;
	
	/**
	 * Bit flags for each of the buttons. Use ButtonMaskFromId to turn an ID into a mask
	 */
	public long ulButtonTouched;
	
    /**
     * Axis data for the controller's analog inputs.
     */
	public VRControllerAxis_t[] rAxis = new VRControllerAxis_t[5];
	
	
	/**
	 * Create a new VR controller state.
	 */
	public VRControllerState_t() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("unPacketNum", "ulButtonPressed", "ulButtonTouched", "rAxis");
	}
	
    /**
     * Create a new VR controller state.
     * @param unPacketNum if packet num matches that on your prior call, then the controller state hasn't been changed since your last call and there is no need to process it.
     * @param ulButtonPressed bit flags for each of the buttons. Use ButtonMaskFromId to turn an ID into a mask
     * @param ulButtonTouched bit flags for each of the buttons. Use ButtonMaskFromId to turn an ID into a mask
     * @param rAxis axis data for the controller's analog inputs.
     */
	public VRControllerState_t(int unPacketNum, long ulButtonPressed, long ulButtonTouched, VRControllerAxis_t rAxis[]) {
		super();
		this.unPacketNum = unPacketNum;
		this.ulButtonPressed = ulButtonPressed;
		this.ulButtonTouched = ulButtonTouched;
		if ((rAxis.length != this.rAxis.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.rAxis = rAxis;
	}
	
	/**
	 * Create a new VR controller state.
	 * @param peer the pointer to the native structure.
	 */
	public VRControllerState_t(Pointer peer) {
		super(peer);
	}
	
	/**
	 * JNA specific type.
	 * <p>
     * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
     * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
     * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
	 */
	public static class ByReference extends VRControllerState_t implements Structure.ByReference {
		
	};
	
	/**
	 * JNA specific type.
     * <p>
     * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
     * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
     * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
	 *
	 */
	public static class ByValue extends VRControllerState_t implements Structure.ByValue {
		
	};
}
